version: '3.8'

services:
  mlflow-db:
    image: postgres:15-alpine
    container_name: mlflow-postgres
    environment:
      POSTGRES_DB: mlflow
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - mlflow_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - mlflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow -d mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  mlflow-minio:
    image: minio/minio:latest
    container_name: mlflow-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - mlflow_minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - mlflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mlflow-server:
    image: python:3.11-slim
    container_name: mlflow-server
    depends_on:
      mlflow-db:
        condition: service_healthy
      mlflow-minio:
        condition: service_healthy
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://mlflow:mlflow_password@mlflow-db:5432/mlflow
      MLFLOW_DEFAULT_ARTIFACT_ROOT: s3://mlflow-artifacts/
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin123
      MLFLOW_S3_ENDPOINT_URL: http://mlflow-minio:9000
      MLFLOW_S3_IGNORE_TLS: true
    ports:
      - "5000:5000"
    networks:
      - mlflow-network
    restart: unless-stopped
    volumes:
      - ./mlflow-requirements.txt:/tmp/requirements.txt
    command: >
      bash -c "
        pip install --no-cache-dir -r /tmp/requirements.txt &&
        mlflow server \
          --backend-store-uri postgresql://mlflow:mlflow_password@mlflow-db:5432/mlflow \
          --default-artifact-root s3://mlflow-artifacts/ \
          --host 0.0.0.0 \
          --port 5000 \
          --serve-artifacts
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  mlflow-init:
    image: minio/mc:latest
    container_name: mlflow-init
    depends_on:
      mlflow-minio:
        condition: service_healthy
    networks:
      - mlflow-network
    entrypoint: >
      bash -c "
        mc alias set minio http://mlflow-minio:9000 minioadmin minioadmin123 &&
        mc mb minio/mlflow-artifacts --ignore-existing &&
        mc policy set public minio/mlflow-artifacts &&
        echo 'MLflow artifact bucket created successfully'
      "
    restart: "no"

volumes:
  mlflow_postgres_data:
    driver: local
  mlflow_minio_data:
    driver: local

networks:
  mlflow-network:
    driver: bridge
    name: mlflow-network